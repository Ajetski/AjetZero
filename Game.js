/**
 * Game subscribes to gameId events and handles game events posting moves
 * generated by player object that must implement getNextMove.
 *  
 */
class Game {

  /**
   * Initialise with interface to lichess.
   */
  constructor(api, name, player) {
    this.api = api;
    this.name = name;
    this.player = player;
  }

  start(gameId) {
    this.gameId = gameId;
    this.api.streamGame(gameId, (event) => { this.handler(event) });
  }

  handler(event) {
    console.log("game event:" + JSON.stringify(event));
    var moves = '';
    var nextMove = '';

    if (event.type === "chatLine" && event.username !== this.name) {
      this.api.chat(this.gameId,event.room,"hi");
      return;
    }
    
    if (event.type === "gameFull") {
      this.colour = this.playingAs(event);
      console.log(this.name + " is playing as : " + this.colour);
      moves = event.state.moves;
    }

    if (event.type === "gameState") {
      moves = event.moves;
    }

    if (this.isTurn(this.colour, moves)) {
      nextMove = this.player.getNextMove(moves);
      console.log(this.name + " as " + this.colour + " to move : " + nextMove);
      if (nextMove) {
        this.api.makeMove(this.gameId, nextMove);
      }
    }
    else {
      console.log("Other side to move");
    }
  }

  playingAs(event) {
    return (event.white.id === this.name) ? "white" : "black";
  }

  isTurn(colour, moves) {
    var parity = moves.split(' ').length % 2;
    if (moves === '') { parity = 0; }
    if (colour === "white") { return (parity == 0); }
    return (parity === 1);
  }
}

module.exports = Game;
