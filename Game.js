/**
 * Game subscribes to gameId events and handles game events posting moves
 * generated by player object that must implement getNextMove.
 *  
 */
class Game {

  /**
   * Initialise with interface to lichess.
   */
  constructor(api, name, player) {
    this.api = api;
    this.name = name;
    this.player = player;
  }

  start(gameId) {
    this.gameId = gameId;
    this.api.streamGame(gameId, (event) => this.handler(event));
  }

  handleChatLine(event) {
    if (event.username !== this.name) {
      this.api.chat(this.gameId, event.room, "hi");
    }
  }


  handler(event) {
    if (event.type === "chatLine") {
      return this.handleChatLine(event);
    }

    if (event.type === "gameFull") {
      this.colour = this.playingAs(event);
      return this.playNextMove(event.state.moves);
    }

    if (event.type === "gameState") {
      return this.playNextMove(event.moves);
    }
  }

  playNextMove(moves) {
    if (this.isTurn(this.colour, moves)) {
      const nextMove = this.player.getNextMove(moves);
      console.log(this.name + " as " + this.colour + " to move " + nextMove);
      if (nextMove) {
        this.api.makeMove(this.gameId, nextMove);
      }
    }
  }

  playingAs(event) {
    return (event.white.id === this.name) ? "white" : "black";
  }

  isTurn(colour, moves) {
    var parity = (moves === "") ? 0 : moves.split(" ").length % 2;
    return (colour === "white") ? (parity === 0) : (parity === 1);
  }
}

module.exports = Game;
